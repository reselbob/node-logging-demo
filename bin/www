#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-logging-demo:server');
var http = require('http');
//the Logentries logging agent
var logger = require('le_node');
//a custom object that contains configuration information
var config = require('../config');
// a custom utils object that will provide the skeleton
//logging object
var loggingUtils = require('../lib/logging-utils');
var log = new logger({
  token:config.logging.token,
  console:true
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;


  //create logging details for the error
  var o = {};
  var loggingObject = new loggingUtils.loggingObject();
  o.errorCode = error.code;
  o.errorMessage = error.message;
  o.location = bind;

  loggingObject.details = o;

  //Log it as an error
  log.err(loggingObject);
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  var loggingObject = new loggingUtils.loggingObject();

  //Custom logging information that reports things
  //are strating just dandy fine.
  var o = {};
  o.event = "onListening";
  o.message = 'Listening on ' + bind;
  loggingObject.details = o;

  //Log the loggingObject
  log.info(loggingObject);
}
